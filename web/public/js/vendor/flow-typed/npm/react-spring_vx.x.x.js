// flow-typed signature: 4e068a4d7a58906f1a970cfc2bbd61d2
// flow-typed version: <<STUB>>/react-spring_v^7.1.3/flow_v0.86.0

// NOTE(pablo): all these type definitions were written by Zenysis.
// We should actually add these to the flow-typed repo at some
// point. If a type annotation here is wrong, please correct it.

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-spring'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

type BaseInterpolationConfig = {
  extrapolateLeft?: 'identity' | 'clamp' | 'extend',
  extrapolateRight?: 'identity' | 'clamp' | 'extend',
  extrapolate?: 'identity' | 'clamp' | 'extend',
};

type InterpolationConfigWithRange = {
  range: $ReadOnlyArray<number>,
  output: $ReadOnlyArray<number>,
} & BaseInterpolationConfig;

type InterpolationConfigWithMap<V, R> = {
  map: V => R,
} & BaseInterpolationConfig;

type InterpolationConfigWithRangeAndMap<R> = {
  range: $ReadOnlyArray<number>,
  output: $ReadOnlyArray<number>,
  map: number => R,
};

declare interface Spring$AnimatedValue<V> {
  interpolate<R>(mappingFunc: (V) => R): Spring$AnimatedValue<R>;
  interpolate<R>(config: BaseInterpolationConfig): Spring$AnimatedValue<R>;
  interpolate<R>(
    config: InterpolationConfigWithRange,
  ): Spring$AnimatedValue<number>;
  interpolate<R>(
    config: InterpolationConfigWithMap<V, R>,
  ): Spring$AnimatedValue<R>;
  interpolate<R>(
    config: InterpolationConfigWithRangeAndMap<R>,
  ): Spring$AnimatedValue<R>;
  interpolate(
    inputRange: $ReadOnlyArray<number>,
    outputRange: $ReadOnlyArray<number>,
  ): Spring$AnimatedValue<number>;
}

declare type Spring$AnimatedValues<Vals: { +[string]: mixed }> = $ObjMap<
  Vals,
  <V: $Values<Vals>>(V) => Spring$AnimatedValue<V>,
>;

declare module 'react-spring' {
  declare type SpringConfigType = {
    clamp?: boolean,
    delay?: number,
    duration?: number,
    easing?: number => number,
    friction?: number,
    mass?: number,
    precision?: number,
    tension?: number,
    velocity?: number,
  };

  declare type SpringConfig = {
    default: SpringConfigType,
    gentle: SpringConfigType,
    wobbly: SpringConfigType,
    stiff: SpringConfigType,
    slow: SpringConfigType,
    molasses: SpringConfigType,
  };

  declare type SpringRendererFunc<Values> = (Values) => React$Node;

  declare type BaseSpringProps<Values: { +[string]: mixed }> = {
    from?: $Shape<Values>,
    to?: Values,
    config?: SpringConfigType | ((key: $Keys<Values>) => SpringConfigType),
    immediate?: boolean | (<K: $Keys<Values>>(key: K) => boolean),
    reset?: boolean,
    force?: boolean,
    after?: $Shape<Values>,
    delay?: number,
    reverse?: boolean,
    onStart?: () => void,
  };

  declare type NormalSpringProps<Values: { +[string]: mixed }> = {
    native?: false,
    children?: SpringRendererFunc<Values>,
    onRest?: (vals: Values) => void,
    onFrame?: (vals: Values) => void,
  };

  declare type NativeSpringProps<Values: { +[string]: mixed }> = {
    native: true,
    children?: SpringRendererFunc<Spring$AnimatedValues<Values>>,
    onRest?: (vals: Spring$AnimatedValues<Values>) => void,
    onFrame?: (vals: Spring$AnimatedValues<Values>) => void,
  };

  declare type SpringProps<Values: { +[string]: mixed }> =
    | (NormalSpringProps<Values> & BaseSpringProps<Values>)
    | (NativeSpringProps<Values> & BaseSpringProps<Values>);

  declare class Spring<V> extends React$Component<SpringProps<V>> {}

  declare module.exports: {
    Spring: typeof Spring,
    Transition: any,
    animated: any,
    config: SpringConfig,
  };
}
